1- le server reçoit le pseudo : string

2-  le site web construit un objet:
pseudo,
hostname,
authKey,
requestType,
userDataAsked (si requestType === "signUp")

3-  donne l'objet au package passprint

4-  passprint génère un timestamp   => getCurrentTimestamp
    passprint génère un nonce       => getNonce

    passprint génère un nouvel object:{
        pseudo,
        hostname,
        authKey,
        requestType,
        userDataAsked (si requestType === "signUp")
        timestamp,
        nonce,
        
    }                               => buildOriginalPayloadForPassprintApi

5-  passprint sign l'objet avec la clé privé du site web
    passprint génère un nouvel objet: {
        pseudo,
        hostname,
        authKey,
        requestType,
        userDataAsked (si requestType === "signUp")
        timestamp,
        nonce,
        signature
    }

6-  pas possible de chiffré avec une clé public le payload car trop long pour cela
    donc on utilise un chiffrement symétrique avec cipher et c'est la clé utilisé lors du chiffrement
    symétrique qui est chiffré avec la clé public

7- au final on aura un objet avec : {
    iv: string,
    authTag: string,
    encryptedKey: string,
    encryptedData: string
}

8-  passprint envoi l'objet à server api passprint

    